@using BlazorWindowManager.ClassLibrary.Element
@using BlazorWindowManager.ClassLibrary.Direction

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<div class="bwmt_grid-display  @GetCssClasses()"
     style="@_dimensionsRecord.BuildCssStyleString()">
    <BlazorWindowManager.RazorClassLibrary.Transformative.TransformativeDisplay DimensionsRecord="_dimensionsRecord"
                                                                                OnDimensionsRecordChangedEventCallback="OnDimensionsRecordChangedEventCallback"/>

    @if (GridModel.GridModels.Count == 0)
    {
        <GridIsEmptyDisplay AddWindowEventCallback="((_) => OnAddWindowEventCallback((CardinalDirectionKind.North, 0, 0)))" />
    }
    else
    {
        List<GridModel> previousRow = null;

        for (int i = 0; i < GridModel.GridModels.Count; i++)
        {
            @* Storing a local copy of the for loop iteration variable is required in Blazor *@
            var rowIndex = i;
            var currentRow = GridModel.GridModels[rowIndex];

            @if(previousRow is not null)
            {
                <GridRowDividerDisplay />
            }

            <GridRowDisplay GridRowIndex="rowIndex"
                            GridTotalRowCount="GridModel.GridModels.Count"
                            GridRowElementReferences="currentRow"
                            AddWindowEventCallback="OnAddWindowEventCallback" />

            previousRow = currentRow;
        }
    }
</div>
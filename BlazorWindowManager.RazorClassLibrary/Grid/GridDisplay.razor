@using BlazorWindowManager.ClassLibrary.Grid
@using Fluxor.Blazor.Web.Components
@using System.Collections.Immutable
@using BlazorWindowManager.RazorClassLibrary.Transformative

@inherits FluxorComponent

@if (_cachedGridBoard is not null &&
     _cachedHtmlElementRecord is not null)
{
    <div class="bwmt_grid-display-theme-wrapping @GetCssClasses()">
        <div class="bwmt_grid-display"
             style="@_cachedHtmlElementRecord.DimensionsRecord.BuildCssStyleString()">
            <TransformativeDisplay HtmlElementRecord="_cachedHtmlElementRecord" />
            
            @if (_cachedGridBoard.GridItemRecords.Any())
            {
                ImmutableArray<GridItemRecord>? previousRow = null;

                for (int i = 0; i < _cachedGridBoard.GridItemRecords.Length; i++)
                {
                    var rowIndex = i;
                    var row = _cachedGridBoard.GridItemRecords[rowIndex];

                    if (previousRow is not null)
                    {
                        <GridRowDividerDisplay />
                    }

                    <CascadingValue Value="ChooseGridTabRecordRenderFragment">
                        <CascadingValue Name="GridDisplayCachedHtmlElementRecord" Value="_cachedHtmlElementRecord">
                            <GridRowDisplay Row="row"/>
                        </CascadingValue>
                    </CascadingValue>

                    previousRow = row;
                }
            }
            else
            {
                <div style="cursor: pointer;"
                     @onclick="AddGridItemRecordOnClick">
                    GridRecord is empty click here to add a GridItem
                </div>
            }
        </div>
    </div>
}